#ifndef DEVINTRIN_HU
#define DEVINTRIN_HU

__device__ __forceinline__ unsigned int __laneid() {
  unsigned int laneid;
  asm volatile("mov.u32 %0, %%laneid;" : "=r"(laneid));
  return laneid;
}
__device__ __forceinline__ unsigned int __warpid() {
  unsigned int warpid;
  asm volatile("mov.u32 %0, %%warpid;" : "=r"(warpid));
  return warpid;
}
__device__ __forceinline__ unsigned int __smid() {
  unsigned int smid;
  asm volatile("mov.u32 %0, %%smid;" : "=r"(smid));
  return smid;
}
__device__ __forceinline__ unsigned int __gridid() {
  unsigned int gridid;
  asm volatile("mov.u32 %0, %%gridid;" : "=r"(gridid));
  return gridid;
}

/// Only support T = float; this is only to mimic the API of tex2D.
template <typename T = float>
__device__ __forceinline__ T __tex2Ds32(cudaTextureObject_t tex, const int x,
                                        const int y) {
  static_assert(std::is_same<T, float>::value, "Only support float type");
  T a, b, c, d;
  asm volatile("tex.2d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5, %6}];\n\t"
               : "=f"(a), "=f"(b), "=f"(c), "=f"(d) // Output operands
               : "l"(tex), "r"(x), "r"(y)           // Input operands
  );
  return a;
}

#endif // DEVINTRIN_HU

/* vim: set filetype=cuda */
